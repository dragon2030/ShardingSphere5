# 应用名称
# 读写分离
spring.application.name=sharging-jdbc-demo
# 开发环境设置
spring.profiles.active=dev
# 内存模式
# 单机模式：
#如果使用单机模式（Standalone），则不需要配置 repository，元数据和状态信息会存储在内存中。
#集群模式：
#如果使用集群模式（Cluster），必须配置 repository，否则 ShardingSphere 无法正常工作。根据实际需求选择合适的持久化仓库（如 Zookeeper、Etcd、Nacos 等）
spring.shardingsphere.mode.type=Memory

# 配置真实数据源
spring.shardingsphere.datasource.names=master,slave1,slave2

# 配置第 1 个数据源
spring.shardingsphere.datasource.master.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.master.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.master.jdbc-url=jdbc:mysql://192.168.100.201:3306/db_user
spring.shardingsphere.datasource.master.jdbc-url=jdbc:mysql://localhost:3306/sharding_sphere?useSSL=false&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.master.username=root
spring.shardingsphere.datasource.master.password=root

# 配置第 2 个数据源
spring.shardingsphere.datasource.slave1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.slave1.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.slave1.jdbc-url=jdbc:mysql://192.168.100.201:3307/db_user
spring.shardingsphere.datasource.slave1.jdbc-url=jdbc:mysql://localhost:3306/sharding_sphere1?useSSL=false&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.slave1.username=root
spring.shardingsphere.datasource.slave1.password=root

# 配置第 3 个数据源
spring.shardingsphere.datasource.slave2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.slave2.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.slave2.jdbc-url=jdbc:mysql://192.168.100.201:3308/db_user
spring.shardingsphere.datasource.slave2.jdbc-url=jdbc:mysql://localhost:3306/sharding_sphere2?useSSL=false&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.slave2.username=root
spring.shardingsphere.datasource.slave2.password=root

# 读写分离类型，如: Static，Dynamic
# myds：是你定义的数据源名称，在这个配置中，myds 是一个自定义的标识符，可以根据需求更改。
# Dynamic 类型的优点：
#动态决策：可以在运行时根据不同的策略来选择读写库。例如，在一些复杂的业务场景中，你可能希望通过请求头、用户角色、请求参数等来决定使用主库还是从库。
#灵活性高：与 Static 模式不同，Dynamic 模式为你提供了更多的灵活性，可以根据具体的负载均衡策略或者业务逻辑来动态切换主从库。

# readwrite-splitting 是 读写分离规则 的配置项名称。它用于定义如何将读操作和写操作分发到不同的数据源
spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.type=Static
# 写数据源名称
# 所有的参数都通过这种形式 props.
spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.props.write-data-source-name=master
# 读数据源名称，多个从数据源用逗号分隔
spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.props.read-data-source-names=slave1,slave2

# 负载均衡算法名称
spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.load-balancer-name=alg_round

# 负载均衡算法配置 可切换alg_round alg_random alg_weight
# 负载均衡算法类型
# 负载均衡策略：
#round_robin：轮询策略，Sharding-JDBC 会把读请求按顺序分发到每个从库上，确保负载均衡。
#random：随机策略，每次从多个从库中随机选择一个来执行读请求。
#simple：简单策略，只选择一个固定的从库来处理所有的读请求
#alg_weight 权重
spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_round.type=ROUND_ROBIN
spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_random.type=RANDOM
spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.type=WEIGHT
spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.props.slave1=1
spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.props.slave2=2

# 打印SQl
spring.shardingsphere.props.sql-show=true



